"use strict";(self.webpackChunkmachnet_page=self.webpackChunkmachnet_page||[]).push([[895],{2375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"tutorial-basics/machnet-intro","title":"Machnet: Baby steps","description":"1. Set up two machines with two NICs each","source":"@site/docs/tutorial-basics/machnet-intro.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/machnet-intro","permalink":"/machnet-docs/docs/tutorial-basics/machnet-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/sarsanaee/machnet-docs/tree/main/docs/tutorial-basics/machnet-intro.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Machnet: Baby Steps","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial - Basics","permalink":"/machnet-docs/docs/category/tutorial---basics"},"next":{"title":"Machnet: Performance Report","permalink":"/machnet-docs/docs/performance_report"}}');var a=t(4848),r=t(8453);const i={sidebar_label:"Machnet: Baby Steps",sidebar_position:2},c="Machnet: Baby steps",o={},h=[{value:"1. Set up two machines with two NICs each",id:"1-set-up-two-machines-with-two-nics-each",level:2},{value:"2. Get the Docker image",id:"2-get-the-docker-image",level:2},{value:"3. Start the Machnet process on both VMs",id:"3-start-the-machnet-process-on-both-vms",level:2},{value:"4. Run the hello world example",id:"4-run-the-hello-world-example",level:2},{value:"5. Run the end-to-end benchmark",id:"5-run-the-end-to-end-benchmark",level:2},{value:"Machnet API",id:"machnet-api",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"machnet-baby-steps",children:"Machnet: Baby steps"})}),"\n",(0,a.jsx)(n.h2,{id:"1-set-up-two-machines-with-two-nics-each",children:"1. Set up two machines with two NICs each"}),"\n",(0,a.jsx)(n.p,{children:"Machnet requires a dedicated NIC on each machine that it runs on. This NIC may be\nused by multiple applications that use Machnet."}),"\n",(0,a.jsx)(n.p,{children:"On Azure, we recommend the following steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create two VMs with accelerated networking enabled. The VMs will start up with one NIC each, named ",(0,a.jsx)(n.code,{children:"eth0"}),". This NIC is ",(0,a.jsx)(n.em,{children:"never"})," used by Machnet."]}),"\n",(0,a.jsx)(n.li,{children:"Shut-down the VMs."}),"\n",(0,a.jsx)(n.li,{children:"Create two new accelerated NICs from the portal, with no public IPs, and add one to each VM."}),"\n",(0,a.jsxs)(n.li,{children:["After restarting, each VM should have another NIC named ",(0,a.jsx)(n.code,{children:"eth1"}),", which will be used by Machnet."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"examples"})," directory contains detailed scripts/instructions to launch VMs for Machnet."]}),"\n",(0,a.jsx)(n.h2,{id:"2-get-the-docker-image",children:"2. Get the Docker image"}),"\n",(0,a.jsx)(n.p,{children:"Pulling our prebuilt Machnet docker image from GHCR requires an auth token:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Generate a Github personal access token for yourself (",(0,a.jsx)(n.a,{href:"https://github.com/settings/tokens",children:"https://github.com/settings/tokens"}),") with the read",":packages"," scope. and store it in the ",(0,a.jsx)(n.code,{children:"GITHUB_PAT"})," environment variable."]}),"\n",(0,a.jsxs)(n.li,{children:["At ",(0,a.jsx)(n.code,{children:"https://github.com/settings/tokens"}),', follow the steps to "Configure SSO" for this token.']}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install packages required to try out Machnet\nsudo apt-get update\nsudo apt-get install -y docker.io net-tools driverctl uuid-dev\n\n# Reboot like below to allow non-root users to run Docker\nsudo usermod -aG docker $USER && sudo reboot\n\n# We assume that the Github token is stored as GITHUB_PAT\necho ${GITHUB_PAT} | docker login ghcr.io -u <github_username> --password-stdin\ndocker pull ghcr.io/microsoft/machnet/machnet:latest\n"})}),"\n",(0,a.jsx)(n.h2,{id:"3-start-the-machnet-process-on-both-vms",children:"3. Start the Machnet process on both VMs"}),"\n",(0,a.jsxs)(n.p,{children:["Using DPDK often requires unbinding the dedicated NIC from the OS. This will\ncause the NIC to disappear from tools like ",(0,a.jsx)(n.code,{children:"ifconfig"}),". ",(0,a.jsx)(n.strong,{children:"Before this step,\nnote down the IP and MAC address of the NIC, since we will need them\nlater."})]}),"\n",(0,a.jsxs)(n.p,{children:["Below, we assume that the dedicated NIC is named ",(0,a.jsx)(n.code,{children:"eth1"}),".  These steps can be\nautomated using a script like\n",(0,a.jsx)(n.a,{href:"examples/azure_start_machnet.sh",children:"azure_start_machnet.sh"})," that uses the\ncloud's metadata service to get the NIC's IP and MAC address."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'MACHNET_IP_ADDR=`ifconfig eth1 | grep -w inet | tr -s " " | cut -d\' \' -f 3`\nMACHNET_MAC_ADDR=`ifconfig eth1 | grep -w ether | tr -s " " | cut -d\' \' -f 3`\n\n# If on Azure, use driverctl to unbind the NIC instead of dpdk-devbind.py:\nsudo modprobe uio_hv_generic\nDEV_UUID=$(basename $(readlink /sys/class/net/eth1/device))\nsudo driverctl -b vmbus set-override $DEV_UUID uio_hv_generic\n\n# Otherwise, use dpdk-devbind.py like so\n# sudo <dpdk_dir>/usertools/dpdk-devbind.py --bind=vfio-pci <PCIe address of dedicated NIC>\n\n# Start Machnet\necho "Machnet IP address: $MACHNET_IP_ADDR, MAC address: $MACHNET_MAC_ADDR"\ngit clone --recursive https://github.com/microsoft/machnet.git\ncd machnet\n./machnet.sh --mac $MACHNET_MAC_ADDR --ip $MACHNET_IP_ADDR\n\n# Note: If you lose the NIC info, the Azure metadata server has it:\ncurl -s -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | jq \'.network.interface[1]\'\n'})}),"\n",(0,a.jsx)(n.h2,{id:"4-run-the-hello-world-example",children:"4. Run the hello world example"}),"\n",(0,a.jsx)(n.p,{children:"At this point, the Machnet container/process is running on both VMs. We can now\ntest things end-to-end with a client-server application."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Build the Machnet helper library and hello_world example, on both VMs\n./build_shim.sh\ncd examples\n\n# On VM #1, run the hello_world server\n./hello_world --local <eth1 IP address of VM 1>\n\n# On VM #2, run the hello_world client. This should print the reply from the server.\n./hello_world --local <eth1 IP address of VM 2> --remote <eth1 IP address of VM 1>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"5-run-the-end-to-end-benchmark",children:"5. Run the end-to-end benchmark"}),"\n",(0,a.jsxs)(n.p,{children:["The Docker image contains a pre-built benchmark called ",(0,a.jsx)(n.code,{children:"msg_gen"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'MSG_GEN="docker run -v /var/run/machnet:/var/run/machnet ghcr.io/microsoft/machnet/machnet:latest release_build/src/apps/msg_gen/msg_gen"\n\n# On VM #1, run the msg_gen server\n${MSG_GEN} --local_ip <eth1 IP address of VM 1>\n\n# On VM #2, run the msg_gen client\n${MSG_GEN} --local_ip <eth1 IP address of VM 2> --remote_ip <eth1 IP address of VM 1>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The client should print message rate and latency percentile statistics.\n",(0,a.jsx)(n.code,{children:"msg_gen --help"})," lists all the options available."]}),"\n",(0,a.jsxs)(n.p,{children:["We can also build ",(0,a.jsx)(n.code,{children:"msg_gen"})," from source without DPDK or rdma_core:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'cd machnet\nrm -rf build; mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=Release ..; make -j\nMSG_GEN="~/machnet/build/src/apps/msg_gen/msg_gen"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"machnet-api",children:"Machnet API"}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"src/ext/machnet.h",children:"machnet.h"})," for the full API documentation.  Applications use the following steps to interact with the Machnet service:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Initialize the Machnet library using ",(0,a.jsx)(n.code,{children:"machnet_init()"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["In every thread, create a new shared-memory channel to Machnet using ",(0,a.jsx)(n.code,{children:"machnet_attach()"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Listen on a port using ",(0,a.jsx)(n.code,{children:"machnet_listen()"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Connect to remote processes using ",(0,a.jsx)(n.code,{children:"machnet_connect()"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Send and receive messages using ",(0,a.jsx)(n.code,{children:"machnet_send()"})," and ",(0,a.jsx)(n.code,{children:"machnet_recv()"}),"."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);